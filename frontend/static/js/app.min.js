function App() {
    const [files, setFiles] = React.useState([]);
    const [transcribedText, setTranscribedText] = React.useState('');
    const [error, setError] = React.useState('');
    const [isLoading, setIsLoading] = React.useState(false);
    const [progress, setProgress] = React.useState(0);
    const [progressMessage, setProgressMessage] = React.useState('');
    const progressEventSource = React.useRef(null);

    const handleFileChange = async (event) => {
        const uploadedFiles = Array.from(event.target.files);
        setFiles(uploadedFiles);
        setError('');
        setProgress(0);
        setProgressMessage('');

        for (const file of uploadedFiles) {
            if (file.size > 40 * 1024 * 1024) {
                setError('檔案大小不能超過 40MB');
                return;
            }

            if (!file.type.match('audio.*')) {
                setError('請上傳音頻檔案');
                return;
            }
        }

        // 上傳檔案
        await uploadFiles(uploadedFiles);
    };

    const uploadFiles = async (files) => {
        for (const file of files) {
            try {
                setIsLoading(true);
                setError('');
                setProgress(0);
                setProgressMessage('正在上傳檔案...');

                const formData = new FormData();
                formData.append('file', file);

                const response = await fetch('/api/upload', {
                    method: 'POST',
                    body: formData,
                });

                const data = await response.json();
                if (response.ok) {
                    await transcribeFile(data.filename);
                } else {
                    setError(data.error || '上傳失敗');
                    setIsLoading(false);
                }
            } catch (err) {
                setError('上傳過程中發生錯誤');
                setIsLoading(false);
            }
        }
    };

    const transcribeFile = async (filename) => {
        try {
            setError('');
            setProgress(0);
            setProgressMessage('準備開始轉錄...');

            // 關閉之前的 EventSource（如果存在）
            if (progressEventSource.current) {
                progressEventSource.current.close();
            }

            const response = await fetch('/api/transcribe', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ filename }),
            });

            const data = await response.json();
            if (response.ok) {
                // 開始監聽進度
                const eventSource = new EventSource(`/api/progress/${data.task_id}`);
                progressEventSource.current = eventSource;

                eventSource.onmessage = (event) => {
                    try {
                        const progress = JSON.parse(event.data);
                        console.log('Progress update:', progress); // 添加日誌
                        setProgress(progress.progress);
                        setProgressMessage(progress.message);

                        if (progress.status === 'completed') {
                            eventSource.close();
                            setTranscribedText(data.text);
                            setIsLoading(false);
                            setProgress(100);
                        } else if (progress.status === 'error') {
                            eventSource.close();
                            setError(progress.message);
                            setIsLoading(false);
                        }
                    } catch (err) {
                        console.error('Error parsing progress:', err);
                    }
                };

                eventSource.onerror = (err) => {
                    console.error('EventSource error:', err);
                    eventSource.close();
                    setError('進度更新連接已斷開');
                    setIsLoading(false);
                };
            } else {
                setError(data.error || '轉錄失敗');
                setProgress(0);
                setIsLoading(false);
            }
        } catch (err) {
            console.error('Transcription error:', err);
            setError('轉錄過程中發生錯誤');
            setProgress(0);
            setIsLoading(false);
        }
    };

    // 組件卸載時清理 EventSource
    React.useEffect(() => {
        return () => {
            if (progressEventSource.current) {
                progressEventSource.current.close();
            }
        };
    }, []);

    return (
        <div className="container mx-auto px-4 py-8 max-w-3xl">
            <h1 className="text-4xl font-bold mb-8 text-center">MP3 轉文字工具</h1>
            
            <div className="bg-white rounded-lg shadow-md p-6 mb-8">
                <div className="mb-4">
                    <input
                        type="file"
                        onChange={handleFileChange}
                        accept=".mp3,.wav,.m4a,.ogg,.flac"
                        className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                        disabled={isLoading}
                    />
                    <p className="text-sm text-gray-500 mt-1">
                        支援的格式：MP3, WAV, M4A, OGG, FLAC（最大 40MB）
                    </p>
                </div>

                {isLoading && (
                    <div className="mb-4">
                        <div className="w-full bg-gray-200 rounded-full h-2.5 mb-2">
                            <div 
                                className="bg-blue-600 h-2.5 rounded-full transition-all duration-300" 
                                style={{ width: `${progress}%` }}
                            ></div>
                        </div>
                        <p className="text-sm text-gray-600 text-center">{progressMessage}</p>
                        <p className="text-sm text-gray-600 text-center">{progress}%</p>
                    </div>
                )}

                {error && (
                    <div className="text-red-500 mb-4 text-center">{error}</div>
                )}

                {transcribedText && (
                    <div className="mt-8">
                        <h2 className="text-xl font-semibold mb-4">轉錄結果：</h2>
                        <div className="bg-gray-50 p-4 rounded-lg whitespace-pre-wrap">
                            {transcribedText}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

ReactDOM.render(<App />, document.getElementById('root'));
